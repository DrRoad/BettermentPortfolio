source('D:/RProjects/BettermentPortfolio/portBacktestingMaxStarr.R', echo=TRUE)
starrRatio(ret.maxStarr.BL, monthlyReturnsData[,"riskfree"], alpha = 0.075, tscale=12)
starrRatio(ret.BL.maxStarr, monthlyReturnsData[,"riskfree"], alpha = 0.075, tscale=12)
starrRatio(monthlyReturnsData[,"VTI"], monthlyReturnsData[,"riskfree"], alpha = 0.075, tscale=12)
sharpeRatio(ret.BL.maxStarr, monthlyReturnsData[,"riskfree"], tscale=12)
sharpeRatio(monthlyReturnsData[,"VTI"], monthlyReturnsData[,"riskfree"], tscale=12)
sharpeRatio(ret.Naive, monthlyReturnsData[,"riskfree"], tscale=12)
geomMean(ret.Naive, tscale=12)
geomMean(ret.B.maxStarr, tscale=12)
geomMean(ret.BL.maxStarr, tscale=12)
geomMean(monthlyReturnsData[, "VTI"], tscale=12)
head(monthly.R)
ret.EqW <- apply(monthly.R, 1, mean)
head(ret.EqW)
class(ret.EqW)
ret.EqW <- xts(apply(monthly.R, 1, mean), order.by=index(monthly.R))
head(ret.EqW)
colnames(ret.EqW) <- "Equal-Weighted"
ret.all <- merge(ret.BL.maxStarr, monthly.R[,"VTI"], ret.Naive, ret.EqW)
colnames(ret.all) <- c("BL MaxSTARR", "Market", "Naive", "Equal-Weighted")
png(file="PerformanceSummary.png", width=7, height=5, units="in", res=300)
charts.PerformanceSummary(ret.all, wealth.index = TRUE,
lty = c(1,2,3,4), colorset = c("blue","black", "green",
"slategray"))
dev.off()
source('~/.active-rstudio-document')
source('D:/RProjects/BettermentPortfolio/portBacktestingQU.R', echo=TRUE)
ret.all <- merge(ret.BL, ret.MeanVar, monthly.R[,"VTI"], ret.Naive, ret.EqW)
colnames(ret.all) <- c("Black-Litterman", "Mean-Variance", "Market", "Naive",
"Equal-Weighted")
png(file="PerformanceSummary.png", width=7, height=5, units="in", res=300)
charts.PerformanceSummary(ret.all, wealth.index = TRUE,
lty = c(1,2,3,4), colorset = c("blue","black", "green",
"slategray"))
dev.off()
png(file="PerformanceSummary.png", width=7, height=5, units="in", res=300)
charts.PerformanceSummary(ret.all, wealth.index = TRUE,
lty = c(1,2,3,4,5), colorset = c("blue","black", "green",
"slategray", "skyblue"))
dev.off()
geomMean(ret.BL, tscale = 12)
geomMean(monthly.R[,"VTI"], tscale = 12)
geomMean(ret.BL, tscale = 12) - geomMean(monthly.R[,"VTI"], tscale = 12)
tmp.TO.M <- TO(opt.wts.BL.M)
plot(tmp.TO.M)
60*0.1
60*0.1*12
60*0.2*12
mean(tmp.TO.M)
source('D:/RProjects/BettermentPortfolio/portBacktestingQU.R', echo=TRUE)
install.packages("corpcor")
source('D:/RProjects/BettermentPortfolio/portBacktestingQU.R', echo=TRUE)
tail(opt.wts.BL.M)
source('D:/RProjects/BettermentPortfolio/portBacktestingQU.R', echo=TRUE)
sd(ret.BL)*sqrt(12)
sd(ret.MeanVar)*sqrt(12)
etl(ret.BL)
etl(ret.MeanVar)
png(file="PerformanceSummary.png", width=7, height=5, units="in", res=300)
charts.PerformanceSummary(ret.all, wealth.index = TRUE,
lty = c(1,2,3,4,5), colorset = c("blue","black", "green",
"slategray", "skyblue"),
main = "Performance: Black Litterman vs. 4 Benchmarks")
dev.off()
colnames(ret.all) <- c("Black-Litterman", "Mean-Variance", "Market", "Naive (70/30)",
"Equal-Weighted")
png(file="PerformanceSummary.png", width=7, height=5, units="in", res=300)
charts.PerformanceSummary(ret.all, wealth.index = TRUE,
lty = c(1,2,3,4,5), colorset = c("blue","black", "green",
"slategray", "skyblue"),
main = "Performance: Black Litterman vs. 4 Benchmarks")
dev.off()
drawdowns <- function(R) {
out <- list()
ret.cumul <- cumprod(c(1,(1+R)))
our$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- ret.dd / cummax(ret.cumul)
out$maxrd <- max(ret.rd) #maximum relative drawdown
return(out)
}
drawdowns(ret.BL)
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- ret.dd / cummax(ret.cumul)
out$maxrd <- max(ret.rd) #maximum relative drawdown
return(out)
}
#compute drawdowns of portfolio
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- ret.dd / cummax(ret.cumul)
out$max <- max(ret.rd) #maximum relative drawdown
return(out)
}
drawdowns(ret.BL)$max
#compute drawdowns of portfolio
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- out$dd / cummax(ret.cumul)
out$max <- max(ret.rd) #maximum relative drawdown
return(out)
}
drawdowns(ret.BL)
#compute drawdowns of portfolio
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- out$dd / cummax(ret.cumul)
out$max <- max(out$rd) #maximum relative drawdown
return(out)
}
drawdowns(ret.BL)
drawdowns(ret.BL)$max
drawdowns(ret.MeanVar)$max
mean(drawdowns(ret.MeanVar)$rd)
mean(drawdowns(ret.BL)$rd)
mean(drawdowns(ret.MeanVar)$dd)
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- out$dd / cummax(ret.cumul)
out$max <- max(out$rd) #maximum relative drawdown
out$avg <- avg(out$rd) # average relative drawdown
return(out)
}
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, rf.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = maxdd,
Avg.Drawdown = avgdd)
return(PerfTable)
}
performSummary(ret.all[,"Black-Litterman"], monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=20)
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = maxdd,
Avg.Drawdown = avgdd)
return(PerfTable)
}
performSummary(ret.all[,"Black-Litterman"], monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=20)
sharpeRatio <- function(r.ts, rf.ts, tscale=1){
#r.ts and rf.ts must be univariate zoo or xts objects
#with weekly frequency
mg <- na.omit(merge(r.ts, rf.ts))
ret.e <- mg[,1] - mg[,2]
sr <- mean(ret.e) / sd(mg[,1])
sr <- sqrt(tscale)*sr
return(sr)
}
SR.StdErr <- function(r.ts, rf.ts, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
r <- coredata(r.ts)
n <- nrow(r)
sk <- skewness(r)
krt <- kurtosis(r)
sr.w <- sharpeRatio(r.ts, rf.ts, annual=FALSE)
sr.var <- tscale*(1 + 0.25*(krt+2)*sr.w^2 - sr.w*sk)/n
sqrt(sr.var)
}
etl <- function(r, alpha = 0.05) {
#function for calculating non-parametric ETL as in section 4.2 of Ch 4 lecture notes
r <- sort(r) #r must be a numeric vector
#this generates the index of the quantile corresponding to the alpha level
n.tail <- ifelse( alpha == 0, 1, ceiling(alpha*length(r)))
#ETL expressed as a positive number
-1/n.tail * sum(r[which((1:length(r)) <= n.tail)])
}
starrRatio <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mg <- na.omit(merge(r.ts, rf.ts))
ret.e <- mg[,1] - mg[,2]
starr <- mean(ret.e) / etl(as.numeric(mg[,1], alpha=alpha))
starr <- sqrt(tscale)*starr
return(starr)
}
geomMean <- function(r, tscale=1) {
#r must be a vector or univariate xts (or zoo) object
g.m <- (prod(1+r))^(tscale/length(r)) - 1
return(g.m)
}
#compute drawdowns of portfolio
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- out$dd / cummax(ret.cumul)
out$max <- max(out$rd) #maximum relative drawdown
out$avg <- avg(out$rd) # average relative drawdown
return(out)
}
TO <- function(weights) {
# calculate turnover of portfolio over time
dates = index(weights)
weights=coredata(weights)
n.asset=ncol(weights)
n.dates=nrow(weights)
if(n.dates<2){
print("Less than 2 balancing dates!")
return()
}
TurnOver=rep(0,n.dates-1)
for(i in 1:length(TurnOver)){
TurnOver[i]=sum(abs(weights[i+1,]-weights[i,]))
}
dates=dates[-1]
res=zoo(TurnOver,order.by = dates)
res
}
DIV <- function(weights){
# quantify degree to which portfolio is diversified
# 1 - Herfindahl Hirschman Index (HHI)
if (length(weights) == 1) {
# this is the case for "1 point in time" weights
return(1 - sum(weights^2))
}
# code below for when weights is an xts or zoo  object
n.dates <- nrow(weights)
if(n.dates<1){
print("empty data set")
return()
}
diversification=rep(0,n.dates)
for(i in 1:n.dates){
diversification[i]=1-sum(weights[i,]^2)
}
dates=index(weights)
Div=zoo(diversification,dates)
return(Div)
}
performSummary(ret.all[,"Black-Litterman"], monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=20)
SR.StdErr <- function(r.ts, rf.ts, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
r <- coredata(r.ts)
n <- nrow(r)
sk <- skewness(r)
krt <- kurtosis(r)
sr.w <- sharpeRatio(r.ts, rf.ts, tscale)
sr.var <- tscale*(1 + 0.25*(krt+2)*sr.w^2 - sr.w*sk)/n
sqrt(sr.var)
}
performSummary(ret.all[,"Black-Litterman"], monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=20)
#compute drawdowns of portfolio
drawdowns <- function(r) {
out <- list()
ret.cumul <- cumprod(c(1,(1+r)))
out$dd <- cummax(ret.cumul) - ret.cumul
out$rd <- out$dd / cummax(ret.cumul)
out$max <- max(out$rd) #maximum relative drawdown
out$avg <- mean(out$rd) # average relative drawdown
return(out)
}
performSummary(ret.all[,"Black-Litterman"], monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=20)
head(ret.all)
performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=20)
dim(na.omit(ret.all[,"Black-Litterman"]))
dim(ret.all[,"Black-Litterman"])
tail(ret.all[,"Black-Litterman"])
performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
round(performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12), 3)
tmp<- performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
t(tmp)
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = maxdd,
Avg.Drawdown = avgdd)
return(t(PerfTable))
}
tmp<- performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
tmp
beg(ret.all)
start(ret.all)
end(ret.all)
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = maxdd,
Avg.Drawdown = avgdd,
Start = start(na.omit(merge(r.ts, rf.ts))),
End = end(na.omit(merge(r.ts, rf.ts)))
)
return(t(PerfTable))
}
tmp<- performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
tmp
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=100*mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = 100*maxdd,
Avg.Drawdown = 100*avgdd
)
return(t(round(PerfTable,3)))
}
tmp<- performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
tmp
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=100*mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = 100*maxdd,
Avg.Drawdown = 100*avgdd
)
return(t(PerfTable,3))
}
tmp<- performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
performSummary <- function(r.ts, rf.ts, alpha = 0.05, tscale=1) {
#r.ts and rf.ts must be univariate zoo or xts objects
mu.ann <- geomMean(r.ts, tscale)
SR <- sharpeRatio(r.ts, rf.ts, tscale)
SR.se <- SR.StdErr(r.ts, rf.ts, tscale)
starr <- starrRatio(r.ts, rf.ts, alpha, tscale)
maxdd <- drawdowns(r.ts)$max
avgdd <- drawdowns(r.ts)$avg
PerfTable <- data.frame(GeomMean=100*mu.ann,
SR=SR, SR.se=SR.se,
STARR=starr,
Max.Drawdown = 100*maxdd,
Avg.Drawdown = 100*avgdd
)
return(t(PerfTable))
}
tmp<- performSummary(na.omit(ret.all[,"Black-Litterman"]), monthlyReturnsData[,"riskfree"], alpha=0.05, tscale=12)
tmp
for (i in 1:ncol(ret.all)) {
if (i == 1) {
tmp.tbl <- perfSummary(na.omit(ret.all[,i]), monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
tmp.tbl <- cbind(tmp.tbl,
perfSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)))
}
}
for (i in 1:ncol(ret.all)) {
if (i == 1) {
tmp.tbl <- perfSummary(na.omit(ret.all[,i]), monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
tmp.tbl <- cbind(tmp.tbl,
perfSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))))
}
}
for (i in 1:ncol(ret.all)) {
if (i == 1) {
tmp.tbl <- perfSummary(na.omit(ret.all[,i]), monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
tmp.tbl <- cbind(tmp.tbl,
perfSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))
}
}
# create summary table
for (i in 1:ncol(ret.all)) {
if (i == 1) {
tmp.tbl <- performSummary(na.omit(ret.all[,i]), monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
tmp.tbl <- cbind(tmp.tbl,
performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))
}
}
tmp.tbl
tm(tmp.tbl)
rm(tmp.tbl)
perf.tbl <- round(perf.tbl, 3)
colnames(perf.tbl) <- colnames(ret.all)
for (i in 1:ncol(ret.all)) {
if (i == 1) {
perf.tbl <- performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
perf.tbl <- cbind(tmp.tbl,
performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))
}
}
perf.tbl <- round(perf.tbl, 3)
colnames(perf.tbl) <- colnames(ret.all)
perf.tbl <- round(perf.tbl, 3)
names(perf.tbl) <- colnames(ret.all)
perf.tbl
for (i in 1:ncol(ret.all)) {
if (i == 1) {
perf.tbl <- performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
perf.tbl <- cbind(tmp.tbl,
performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))
}
}
perf.tbl <- round(perf.tbl, 3)
colnames(perf.tbl) <- colnames(ret.all)
# create summary table
for (i in 1:ncol(ret.all)) {
if (i == 1) {
perf.tbl <- performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
perf.tbl <- cbind(perf.tbl,
performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))
}
}
perf.tbl <- round(perf.tbl, 3)
colnames(perf.tbl) <- colnames(ret.all)
perf.tbl
for (i in 1:ncol(ret.all)) {
if (i == 1) {
perf.tbl <- performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12)
} else {
perf.tbl <- cbind(perf.tbl,
performSummary(na.omit(ret.all[,i]),
monthlyReturnsData[ , "riskfree"],
alpha=0.05,
tscale=12))
}
}
perf.tbl <- round(perf.tbl, 2)
colnames(perf.tbl) <- colnames(ret.all)
perf.tbl
9.82/16.13
11.46/18.78
100*0.1
0.01*0.1
0.01*0.1*12
